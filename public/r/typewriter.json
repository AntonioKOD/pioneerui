{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typewriter",
  "type": "registry:ui",
  "title": "Typewriter",
  "description": "A typewriter effect component",
  "files": [
    {
      "path": "registry/pioneerui/typewriter.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useState, useCallback } from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TypewriterProps {\n  text: string | string[]\n  className?: string\n  speed?: number\n  delay?: number\n  cursor?: boolean\n  cursorStyle?: string\n  cursorBlinkSpeed?: number\n  deleteSpeed?: number\n  deleteDelay?: number\n  loop?: boolean\n  onComplete?: () => void\n  onLoop?: () => void\n  typingStyle?: \"mechanical\" | \"natural\"\n}\n\nexport function Typewriter({\n  text,\n  className,\n  speed = 50,\n  delay = 1000,\n  cursor = true,\n  cursorStyle = \"|\",\n  cursorBlinkSpeed = 500,\n  deleteSpeed = 25,\n  deleteDelay = 2000,\n  loop = false,\n  onComplete,\n  onLoop,\n  typingStyle = \"mechanical\",\n}: TypewriterProps) {\n  const [displayText, setDisplayText] = useState(\"\")\n  const [currentIndex, setCurrentIndex] = useState(0)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [cursorVisible, setCursorVisible] = useState(true)\n  const [currentTextIndex, setCurrentTextIndex] = useState(0)\n\n  const texts = Array.isArray(text) ? text : [text]\n\n  const getNaturalDelay = useCallback(() => {\n    if (typingStyle === \"mechanical\") return speed\n    // Random delay between 20ms and 100ms for more natural typing\n    return Math.random() * 80 + 20\n  }, [speed, typingStyle])\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout\n\n    const type = () => {\n      const currentText = texts[currentTextIndex]\n\n      if (!isDeleting) {\n        if (currentIndex < currentText.length) {\n          setDisplayText((prev) => prev + currentText[currentIndex])\n          setCurrentIndex((prev) => prev + 1)\n          timeout = setTimeout(type, getNaturalDelay())\n        } else if (loop || currentTextIndex < texts.length - 1) {\n          timeout = setTimeout(() => {\n            setIsDeleting(true)\n            type()\n          }, deleteDelay)\n        } else {\n          onComplete?.()\n        }\n      } else {\n        if (currentIndex > 0) {\n          setDisplayText((prev) => prev.slice(0, -1))\n          setCurrentIndex((prev) => prev - 1)\n          timeout = setTimeout(type, deleteSpeed)\n        } else {\n          setIsDeleting(false)\n          if (currentTextIndex < texts.length - 1) {\n            setCurrentTextIndex((prev) => prev + 1)\n          } else if (loop) {\n            setCurrentTextIndex(0)\n            onLoop?.()\n          }\n          timeout = setTimeout(type, delay)\n        }\n      }\n    }\n\n    timeout = setTimeout(type, delay)\n\n    return () => clearTimeout(timeout)\n  }, [\n    currentIndex,\n    currentTextIndex,\n    texts,\n    isDeleting,\n    delay,\n    deleteDelay,\n    deleteSpeed,\n    loop,\n    onComplete,\n    onLoop,\n    getNaturalDelay,\n  ])\n\n  // Cursor blinking effect\n  useEffect(() => {\n    if (!cursor) return\n\n    const interval = setInterval(() => {\n      setCursorVisible((prev) => !prev)\n    }, cursorBlinkSpeed)\n\n    return () => clearInterval(interval)\n  }, [cursor, cursorBlinkSpeed])\n\n  return (\n    <span className={cn(\"inline-block\", className)}>\n      {displayText}\n      {cursor && cursorVisible && <span className=\"opacity-100\">{cursorStyle}</span>}\n    </span>\n  )\n}\n\n",
      "type": "registry:ui",
      "target": "components/pioneerui/typewriter.tsx"
    }
  ]
}