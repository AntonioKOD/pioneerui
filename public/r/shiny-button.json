{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "shiny-button",
  "type": "registry:ui",
  "title": "Shiny Button",
  "description": "A shiny button component",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/pioneerui/shiny-button.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { motion } from \"framer-motion\"\n\ninterface ShinyButtonProps {\n  children: React.ReactNode\n  className?: string\n  onClick?: () => void\n}\n\nexport const ShinyButton: React.FC<ShinyButtonProps> = ({ children, className = \"\", onClick }) => {\n  const [isHovered, setIsHovered] = useState(false)\n\n  return (\n    <motion.button\n      className={`relative px-6 py-3 rounded-full bg-white text-black font-semibold border border-black overflow-hidden ${className}`}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      onHoverStart={() => setIsHovered(true)}\n      onHoverEnd={() => setIsHovered(false)}\n      onClick={onClick}\n    >\n      <span className=\"relative z-10\">{children}</span>\n      <motion.div\n        className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent\"\n        initial={{ x: \"-100%\", opacity: 0 }}\n        animate={isHovered ? { x: \"100%\", opacity: 0.5 } : { x: \"-100%\", opacity: 0 }}\n        transition={{ repeat: Number.POSITIVE_INFINITY, duration: 1, ease: \"linear\" }}\n      />\n    </motion.button>\n  )\n}\n\n",
      "type": "registry:ui",
      "target": "components/pioneerui/shiny-button.tsx"
    }
  ]
}